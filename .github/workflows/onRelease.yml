name: On Release

on:
  push:
   tags:
      - RC-*
      - PROD-*

env:
  DOTNET_VERSION: '6.0.x'
  REMOTE_DEPLOYMENT_PATH: '/var/www/my-api' 
  PROJECT_NAME: 'MyApi'
  STAGING_HOST: 'staging.myservice.example'
  STAGING_SSH_USER: 'deployer'
  PROD_SSH_HOST: 'prod.myservice.example'
  STAGING_SSH_USER: 'deployer'
  SERVICE_NAME: 'my-api'

jobs:

  Build-stage:
    name: Build-stage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [  ${{ env.DOTNET_VERSION }} ]

    if: startsWith( github.ref, 'refs/tags/RC')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore "./${{ env.PROJECT_NAME }}"
      - name: Build
        run: dotnet build "./${{ env.PROJECT_NAME }}" --configuration Debug -o ${{ env.PROJECT_NAME }}/release
      - name: Publish
        run: dotnet publish "./${{ env.PROJECT_NAME }}" --configuration Debug -o ${{ env.PROJECT_NAME }}/release
      - name: Archive build
        if: success()
        uses: actions/upload-artifact@v1
        with:
          name: dist_stage
          retention-days: 1
          path: /home/runner/work/${{ github.repository }}/${{env.PROJECT_NAME}}/release

  Build-prod:
    name: Build-prod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ "${{env.DOTNET_VERSION}}" ]

    if: startsWith( github.ref, 'refs/tags/Prod')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore "./${{env.PROJECT_NAME}}"
      - name: Build
        run: dotnet build "./${{env.PROJECT_NAME}}" --configuration Release -o ${{env.PROJECT_NAME}}/release
      - name: Publish
        run: dotnet publish "./${{env.PROJECT_NAME}}" --configuration Release -o ${{env.PROJECT_NAME}}/release
      - name: Archive build
        if: success()
        uses: actions/upload-artifact@v1
        with:
          name: dist_prod
          retention-days: 1
          path: /home/runner/work/${{ github.repository }}/${{env.PROJECT_NAME}}/release
      
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: Build-stage
    steps:
   
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: dist_stage
      - name: Upload files
        uses: appleboy/scp-action@master
        with:
          host: "${{env.STAGING_HOST}}"
          username: "${{env.STAGING_SSH_USER}}"
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          port: "22"
          source: "dist_stage/"
          strip_components: 1
          target: "${{env.REMOTE_DEPLOYMENT_PATH}}"
      - name: Restart Api Application
        uses: appleboy/ssh-action@master
        with:
          host: "${{env.STAGING_HOST}}"
          username: "${{env.STAGING_SSH_USER}}"
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          port: "22"
          script: "sudo /bin/systemctl restart ${{env.SERVICE_NAME}}"
          
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: Build-prod
    
    steps:
   
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: dist_prod
      - name: Upload files
        uses: appleboy/scp-action@master
        with:
          host: "${{env.PROD_HOST}}"
          username: "${{env.PROD_SSH_USER}}"
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          port: "22"
          source: "dist_prod/"
          strip_components: 1
          target: "${{env.REMOTE_DEPLOYMENT_PATH}}"
      - name: Restart Api Application
        uses: appleboy/ssh-action@master
        with:
          host: "${{env.PROD_HOST}}"
          username: "${{env.PROD_SSH_USER}}"
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          port: "22"
          script: "sudo /bin/systemctl restart ${{env.SERVICE_NAME}}"
         


         